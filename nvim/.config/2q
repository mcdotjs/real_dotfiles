return {
  {
    "williamboman/mason.nvim",
    config = function()
      require("mason").setup()
    end,
  },
  {
    "williamboman/mason-lspconfig.nvim",
    config = function()
      require("mason-lspconfig").setup({
        ensure_installed = { "lua_ls", "volar", "tsserver" },
      })
    end,
  },
  {
    "neovim/nvim-lspconfig",
    config = function()
      local lspconfig = require("lspconfig")
      local capabilities = vim.lsp.protocol.make_client_capabilities()

      --local capabilities = require("cmp_nvim_lsp").default_capabilities()
    capabilities = vim.tbl_deep_extend("force", capabilities, require("cmp_nvim_lsp").default_capabilities())
      lspconfig.lua_ls.setup({})
      lspconfig.volar.setup({
        cmd = { "--tsserver-path", "/home/mirko/.local/share/nvim/mason/bin/typescript-language-server" },
      })

      lspconfig.tsserver.setup({
        filetypes = { "javascript", "typescript", "vue" },
        init_options = {
          plugins = {
            {
              name = "@vue/typescript-plugin",
              location = "/home/mirko/.nvm/versions/node/v20.11.1/lib/node_modules/@vue/typescript-plugin",
              languages = { "javascript", "typescript", "vue" },
            },
          },
        },
      })
      --Keymaps
      vim.keymap.set("n", "K", vim.lsp.buf.hover, {})
      vim.keymap.set("n", "gD", vim.lsp.buf.declaration, {})
      vim.keymap.set("n", "gR", vim.lsp.buf.references, { desc = "[g]o to [R]eferences" })
      vim.keymap.set("n", "gI", vim.lsp.buf.implementation, { desc = "[g]o to [I]mplementations" })
      vim.keymap.set("n", "gd", vim.lsp.buf.definition, {})
      vim.keymap.set({ "n", "v" }, "<leader>ca", vim.lsp.buf.code_action, {})
      vim.keymap.set("n", "rn", vim.lsp.buf.rename, { desc = "[r]e[n]ame .. dont know what at the moment" })
      vim.keymap.set(
        "n",
        "ds",
        require("telescope.builtin").lsp_document_symbols,
        { desc = "searching [d]ocument [s]ymbols" }
      )
      vim.keymap.set(
        "n",
        "ws",
        require("telescope.builtin").lsp_dynamic_workspace_symbols,
        { desc = "searching [w]orkspace [s]ymbols" }
      )
    end,
  },
}
